/*******************************************************************************
 * Copyright (c) 2010 Fabian Steeg. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse
 * Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: Fabian Steeg - initial implementation; see bug 277380
 *******************************************************************************/

module org.eclipse.gef4.zest.internal.dot.parser.Dot

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/gef4/zest/internal/dot/parser/Dot.xtext"
var file.extensions = "dot"
var projectName = "org.eclipse.gef4.zest.dot.core"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup { platformUri = "${runtimeProject}/.." }
	component = DirectoryCleaner { directory = "${runtimeProject}/src-gen" }
	component = DirectoryCleaner { directory = "../org.eclipse.gef4.zest.dot.ui/src-gen" }
	component = Generator {
	    activator = "org.eclipse.gef4.zest.internal.dot.parser.DotParserActivator"
		pathRtProject = runtimeProject
		pathUiProject = "../org.eclipse.gef4.zest.dot.ui"
		projectNameRt = projectName
		projectNameUi = "org.eclipse.gef4.zest.dot.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions
			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = ecore.EcoreGeneratorFragment {} // generates Java API for the generated EPackages 
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {} // the serialization component
			fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = file.extensions }
			// the following fragments use the Antlr Generator fragment which 
			// can be installed via update manager from http://download.itemis.com/updates/
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment { options = { backtrack=true } }
            fragment = parser.antlr.XtextAntlrGeneratorFragment { options = { backtrack=true } }
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            }
			fragment = scoping.ImportURIScopingFragment {}
			//fragment = exporting.SimpleNamesFragment {} //FIXME causes errors
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = formatting.FormatterFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}
			fragment = outline.QuickOutlineFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = builder.BuilderIntegrationFragment {}
			fragment = quickfix.QuickfixProviderFragment {}			
		}
	}
}
